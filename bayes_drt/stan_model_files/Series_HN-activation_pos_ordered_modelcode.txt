functions {
	// for impedance calculation
	real HN_x(real omega, real tau0, real beta) {
		// Intermediate "x" variable
		return 1+ pow(omega*tau0,beta)*cos(beta*pi()/2);
	}
	real HN_y(real omega, real tau0, real beta){
		// Intermediate "y" variable
		return pow(omega*tau0,beta)*sin(beta*pi()/2);
	}
	real Zmod_HN(real alpha, real x, real y) {
		return pow(sqrt(square(x) + square(y)),-alpha);
	}
	real theta_HN(real alpha, real x, real y) {
		return -alpha*atan2(y,x);
	}
	
	// Arrhenius functions
	real k_B() {
		// Boltzmann constant (eV/K)
		return 8.617333e-5; 
	} 
	real arrhenius(real temp, real T_base, real dG, real y_base) {
		return y_base*exp((dG/k_B())*(1/temp - 1/T_base));
	}
}
data {
	// dimensions
	int<lower=0> N; // number of measured frequencies
	int<lower=0> K; // number of HN basis functions
	
	// impedance data
	vector[N] freq; // measured frequencies
	vector[2*N] Z; // stacked impedance vector ([Z' Z'']^T)
	vector<lower=0>[N] rel_Z_scale;
	
	// temperature
	vector[N] temp; // measurement temperatures (K)
	real<lower=0> T_base; // base temperature (K)
	
	// fixed hyperparameters
	real<lower=0> R_base_scale_alpha;
	real<lower=0> R_base_scale_beta;
	real<lower=0> sigma_min; // noise level floor
	real<lower=0> induc_scale; // inductance scale
	
	// activation inputs
	real<lower=0> max_delta_G;
	real<lower=0> ln_phi_T_scale;
	real<lower=0> max_phi_T;
	
}
transformed data {
	vector [N] omega = freq*2*pi();
	vector[2*N] rel_Z_scale_stack = append_row(rel_Z_scale,rel_Z_scale);
	real max_ln_phi_T = log(max_phi_T);
}
parameters {
	// impedance offsets
	real<lower=0> Rinf_base_raw;
	real<lower=0> induc_raw;
	
	// HN parameters
	vector<lower=0>[K] R_HN_base;
	vector<lower=0>[K] R_base_scale;
	ordered[K] lntau_HN_base;
	vector<lower=0,upper=1>[K] alpha_HN;
	vector<lower=0,upper=1>[K] beta_HN;
	
	// activation parameters
	vector<lower=0,upper=max_delta_G>[K] delta_G; // activation energy for R_HN
	vector<upper=max_ln_phi_T/ln_phi_T_scale>[K] ln_phi_T_raw; // ln of activation energy factor for tau
	real<lower=0,upper=max_delta_G> delta_G_Rinf; // activation energy for Rinf
	
	// error structure parameters
	real<lower=0> sigma_res_raw;
	real<lower=0> alpha_prop_raw;
	real<lower=0> alpha_re_raw;
	real<lower=0> alpha_im_raw;
	
}
transformed parameters {
	// impedance offsets
	real<lower=0> Rinf_base = Rinf_base_raw*100; // R_inf_base has effective scale of 100
	real<lower=0> induc = induc_raw*induc_scale; // induc has effective scale of induc_scale
	
	// activation parameters
	vector[K] ln_phi_T = ln_phi_T_raw*ln_phi_T_scale; // ln_phi_T has effective scale of 0.2
	
	// error structure parameters
	real<lower=0> sigma_res = sigma_res_raw*0.05;
	real<lower=0> alpha_prop = alpha_prop_raw*0.05;
	real<lower=0> alpha_re = alpha_re_raw*0.05;
	real<lower=0> alpha_im = alpha_im_raw*0.05;
	vector[2*N] sigma_tot; 
	
	// parameters for Z_hat calculation
	vector[2*N] Z_hat;
	vector[N] Z_hat_re = rep_vector(0,N);
	vector[N] Z_hat_im = rep_vector(0,N);
	
	// calculate Z_hat
	for (k in 1:K) {
		real phi_T = exp(ln_phi_T[k]);
		real tau_HN_base = exp(lntau_HN_base[k]);
		for (n in 1:N){
			// calculate R and tau at temp
			real R_HN = arrhenius(temp[n],T_base,delta_G[k],R_HN_base[k]);
			real tau_HN = arrhenius(temp[n],T_base,phi_T*delta_G[k],tau_HN_base);
			
			// temperature-dependent R and tau feed into impedance calcs
			real x = HN_x(omega[n],tau_HN,beta_HN[k]);
			real y = HN_y(omega[n],tau_HN,beta_HN[k]);
			real Zmod = Zmod_HN(alpha_HN[k],x,y);
			real theta = theta_HN(alpha_HN[k],x,y);
			
			Z_hat_re[n] += R_HN*Zmod*cos(theta);
			Z_hat_im[n] += R_HN*Zmod*sin(theta);
		}
	}
	
	Z_hat_re += Rinf_base*exp((delta_G_Rinf/k_B())*(1 ./temp - 1/T_base)); //not using arrhenius here to avoid looping
	Z_hat_im += induc*omega;
	Z_hat = append_row(Z_hat_re,Z_hat_im);
	
	// calculate error scale
	sigma_tot = sqrt(square(sigma_min*rel_Z_scale_stack) + square(sigma_res*rel_Z_scale_stack) + square(alpha_prop*Z_hat)
									+ square(alpha_re*append_row(Z_hat_re,Z_hat_re)) 
									+ square(alpha_im*append_row(Z_hat_im,Z_hat_im))
									);
}
model {
	// impedance offsets
	Rinf_base_raw ~ std_normal();
	induc_raw ~ std_normal();
	
	// HN parameters
	R_base_scale ~ inv_gamma(R_base_scale_alpha,R_base_scale_beta);
	R_HN_base ~ normal(0,R_base_scale);
	
	// activation parameters
	//delta_G ~ std_normal();
	//delta_G_Rinf ~ inv_gamma(dG_alpha,dG_beta);
	//delta_G ~ inv_gamma(dG_alpha,dG_beta);
	ln_phi_T_raw ~ std_normal();
	
	Z ~ normal(Z_hat,sigma_tot);
	sigma_res_raw ~ std_normal();
	alpha_prop_raw ~ std_normal();
	alpha_re_raw ~ std_normal();
	alpha_im_raw ~ std_normal();
}