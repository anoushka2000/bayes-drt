functions {
	// for impedance calculation
	real HN_x(real omega, real tau0, real beta) {
		// Intermediate "x" variable
		return 1+ pow(omega*tau0,beta)*cos(beta*pi()/2);
	}
	real HN_y(real omega, real tau0, real beta){
		// Intermediate "y" variable
		return pow(omega*tau0,beta)*sin(beta*pi()/2);
	}
	real Zmod_HN(real alpha, real x, real y) {
		return pow(sqrt(square(x) + square(y)),-alpha);
	}
	real theta_HN(real alpha, real x, real y) {
		return -alpha*atan2(y,x);
	}
	
	// for drift calculations
	real R_drift(real R_i, real R_f, real k_d, real time) {
		return R_i + (R_f - R_i)*(1 - exp(-k_d*time));
	}
	real tau_drift(real tau_f, real delta_lnR, real k_d, real phi_d, real time) {
		return tau_f*(exp(delta_lnR*phi_d) + (1 - exp(delta_lnR*phi_d))*(1 - exp(-k_d*time))); 
	}
	
	// Arrhenius functions
	real k_B() {
		// Boltzmann constant (eV/K)
		return 8.617333e-5; 
	} 
	real arrhenius(real temp, real T_base, real dG, real y_base) {
		return y_base*exp((dG/k_B())*(1/temp - 1/T_base));
	}
}
data {
	// dimensions
	int<lower=0> N; // number of measured frequencies
	int<lower=0> K; // number of HN basis functions
	int<lower=0> P; // number of distinct temperatures
	
	// impedance data
	vector[N] freq; // measured frequencies
	vector[N] times;
	vector[2*N] Z; // stacked impedance vector ([Z' Z'']^T)
	vector<lower=0>[N] rel_Z_scale;
	
	// temperature
	vector[N] temp; // measurement temperatures (K)
	real<lower=0> T_base; // base temperature (K)
	int temp_start_indices[P]; // indices of new temperature starts
	real<lower=0> temp_uncertainty; // maximum temperature offset
	real<lower=0> temp_offset_scale; // scale for normal prior on temp_offset
	
	// fixed hyperparameters
	real<lower=0> R_f_base_scale_alpha;
	real<lower=0> R_f_base_scale_beta;
	real<lower=0> sigma_min; // noise level floor
	real<lower=0> induc_scale; // inductance scale
	
	// activation inputs
	real<lower=0> max_delta_G;
	real<lower=0> ln_phi_T_scale;
	real<lower=0> max_phi_T;
	
	// drift inputs
	real min_delta_lnR;
	real max_delta_lnR;
	vector<lower=0>[K] sigma_delta_lnR_scale;
	real<lower=0> ln_k_alpha;
	real<lower=0> ln_k_beta;
	real<lower=0> max_delta_G_k;
	real<lower=0> max_phi_d;
	real<lower=0> ln_phi_d_scale;
	real<lower=0> min_k;
	real<lower=0> max_k;
}
transformed data {
	vector [N] omega = freq*2*pi();
	//real min_lntau_HN = log(min_tau_HN);
	//real max_lntau_HN = log(max_tau_HN);
	vector[2*N] rel_Z_scale_stack = append_row(rel_Z_scale,rel_Z_scale);
	real max_ln_phi_T = log(max_phi_T);
	real max_ln_phi_d = log(max_phi_d);
	real min_lnk = log(min_k);
	real max_lnk = log(max_k);
	int temp_end_indices[P];
	for (p in 1:P-1) {
		temp_end_indices[p] = temp_start_indices[p+1] - 1;
	}
	temp_end_indices[P] = N;
}
parameters {
	// impedance offsets
	real<lower=0> Rinf_base_raw;
	real<lower=0> induc_raw;
	
	// HN parameters
	vector<lower=0>[K] R_f_base;
	vector<lower=0>[K] R_f_base_scale;
	ordered[K] lntau_f_base;
	vector<lower=0,upper=1>[K] alpha_HN;
	vector<lower=0,upper=1>[K] beta_HN;
	
	// activation parameters
	vector<lower=0,upper=max_delta_G>[K] delta_G; // activation energy for R_HN
	vector<upper=max_ln_phi_T/ln_phi_T_scale>[K] ln_phi_T_raw; // ln of activation energy factor for tau
	real<lower=0,upper=max_delta_G> delta_G_Rinf; // activation energy for Rinf
	vector<lower=-temp_uncertainty/temp_offset_scale,upper=temp_uncertainty/temp_offset_scale>[P] temp_offset_raw; // no entry for 1st temp - keep fixed
	
	// drift parameters
	vector<lower=0>[K] R_i_base;
	vector<lower=0>[K] R_i_base_scale;
	vector<lower=0>[K] delta_lnR_base_scale_raw;
	vector<lower=min_lnk,upper=max_lnk>[K] ln_k_base;
	vector<lower=0,upper=max_delta_G_k>[K] delta_G_k;
	vector<upper=max_ln_phi_d/ln_phi_d_scale>[K] ln_phi_d_raw; // ln of drift factor for tau
	
	// error structure parameters
	real<lower=0> sigma_res_raw;
	real<lower=0> alpha_prop_raw;
	real<lower=0> alpha_re_raw;
	real<lower=0> alpha_im_raw;
	
}
transformed parameters {
	// impedance offsets
	real<lower=0> Rinf_base = Rinf_base_raw*100; // R_inf_base has effective scale of 100
	real<lower=0> induc = induc_raw*induc_scale; // induc has effective scale of induc_scale
	
	// drift parameters
	vector[K] delta_lnR_base = log(R_i_base ./ R_f_base);
	vector<lower=0>[K] delta_lnR_base_scale = delta_lnR_base_scale_raw .* sigma_delta_lnR_scale;
	vector[K] ln_phi_d = ln_phi_d_raw*ln_phi_d_scale;
	vector<lower=0>[K] ln_k_transform = ln_k_base - min_lnk;
	
	// activation parameters
	vector[K] ln_phi_T = ln_phi_T_raw*ln_phi_T_scale; // ln_phi_T has effective scale of 0.2
	vector<lower=-temp_uncertainty,upper=temp_uncertainty>[P] temp_offset = temp_offset_raw*temp_offset_scale;
	vector[N] temp_actual;
	
	// error structure parameters
	real<lower=0> sigma_res = sigma_res_raw*0.05;
	real<lower=0> alpha_prop = alpha_prop_raw*0.05;
	real<lower=0> alpha_re = alpha_re_raw*0.05;
	real<lower=0> alpha_im = alpha_im_raw*0.05;
	vector[2*N] sigma_tot; 
	
	// parameters for Z_hat calculation
	vector[2*N] Z_hat;
	vector[N] Z_hat_re = rep_vector(0,N);
	vector[N] Z_hat_im = rep_vector(0,N);
	
	// calculate actual temp
	for (p in 1:P) {
		temp_actual[temp_start_indices[p]:temp_end_indices[p]] = temp[temp_start_indices[p]:temp_end_indices[p]] + temp_offset[p];
	}
	
	// calculate Z_hat
	for (k in 1:K) {
		real phi_T = exp(ln_phi_T[k]);
		real phi_d = exp(ln_phi_d[k]);
		real k_base = exp(ln_k_base[k]);
		real tau_f_base = exp(lntau_f_base[k]);
		for (n in 1:N){
			// calculate R_i, R_f, tau_i, and k_d at temp
			real R_i = arrhenius(temp_actual[n],T_base,delta_G[k],R_i_base[k]);
			real R_f = arrhenius(temp_actual[n],T_base,delta_G[k],R_f_base[k]);
			real tau_f = arrhenius(temp_actual[n],T_base,phi_T*delta_G[k],tau_f_base);
			real k_d = arrhenius(temp_actual[n],T_base,-delta_G_k[k],k_base);
			
			// calculate R(t) and tau(t) at time
			real R_t = R_drift(R_i, R_f, k_d, times[n]);
			real tau_t = tau_drift(tau_f, delta_lnR_base[k], k_d, phi_d, times[n]);
			
			// time- and temperature-dependent R_t and tau_t feed into impedance calcs
			real x = HN_x(omega[n],tau_t,beta_HN[k]);
			real y = HN_y(omega[n],tau_t,beta_HN[k]);
			real Zmod = Zmod_HN(alpha_HN[k],x,y);
			real theta = theta_HN(alpha_HN[k],x,y);
			
			Z_hat_re[n] += R_t*Zmod*cos(theta);
			Z_hat_im[n] += R_t*Zmod*sin(theta);
		}
	}
	
	Z_hat_re += Rinf_base*exp((delta_G_Rinf/k_B())*(1 ./temp_actual - 1/T_base)); //not using arrhenius here to avoid looping
	Z_hat_im += induc*omega;
	Z_hat = append_row(Z_hat_re,Z_hat_im);
	
	// calculate error scale
	sigma_tot = sqrt(square(sigma_min*rel_Z_scale_stack) + square(sigma_res*rel_Z_scale_stack) + square(alpha_prop*Z_hat)
									+ square(alpha_re*append_row(Z_hat_re,Z_hat_re)) 
									+ square(alpha_im*append_row(Z_hat_im,Z_hat_im))
									);
}
model {
	// impedance offsets
	Rinf_base_raw ~ std_normal();
	induc_raw ~ std_normal();
	
	// HN parameters
	R_f_base_scale ~ inv_gamma(R_f_base_scale_alpha,R_f_base_scale_beta);
	R_f_base ~ normal(0,R_f_base_scale);
	R_i_base_scale ~ inv_gamma(R_f_base_scale_alpha,R_f_base_scale_beta);
	R_i_base ~ normal(0,R_i_base_scale);
	
	// activation parameters
	ln_phi_T_raw ~ std_normal();
	temp_offset_raw ~ std_normal();
	
	// drift parameters
	//delta_lnR_base_scale_raw ~ inv_gamma(delta_lnR_scale_alpha,delta_lnR_scale_beta);
	delta_lnR_base_scale_raw ~ std_normal();
	delta_lnR_base ~ normal(0,delta_lnR_base_scale);
	ln_phi_d_raw ~ std_normal();
	ln_k_transform ~ inv_gamma(ln_k_alpha,ln_k_beta);
	
	Z ~ normal(Z_hat,sigma_tot);
	sigma_res_raw ~ std_normal();
	alpha_prop_raw ~ std_normal();
	alpha_re_raw ~ std_normal();
	alpha_im_raw ~ std_normal();
}