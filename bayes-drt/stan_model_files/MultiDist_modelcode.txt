data {
	int<lower=0> N; // 2*(number of measured frequencies)
	int<lower=0> Ms; // number of series distributions
	int<lower=0> Mp; // number of parallel distributions
	int<lower=0> Ks[Ms]; // number of basis functions for each series distribution
	int<lower=0> Kp[Mp]; // number of basis functions for each parallel distribution
	matrix[N, sum(Ks)] As;
	matrix[N*Mp, max(Kp)] Ap;
	vector[N] Z; // stacked impedance vector ([Z' Z'']^T)
	vector[N/2] freq; //measured frequencies
	matrix[sum(Ks),max(Ks)] L0s;
	matrix[sum(Ks),max(Ks)] L1s;
	matrix[sum(Ks),max(Ks)] L2s;
	matrix[sum(Kp),max(Kp)] L0p;
	matrix[sum(Kp),max(Kp)] L1p;
	matrix[sum(Kp),max(Kp)] L2p;
	
	real<lower=0> sigma_min; // noise level floor
	real<lower=0> ups_alpha; // shape for inverse gamma distribution on ups
	real<lower=0> ups_beta; // rate for inverse gamma distribution on ups
	real<lower=0> x_sum_invscale;
}
transformed data {
	vector [N] Rinf_vec = append_row(rep_vector(1,N/2), rep_vector(0,N/2));
	vector [N] induc_vec = append_row(rep_vector(0,N/2), 2*pi()*freq);
	//vector [N_tilde] Rinf_vec_tilde = append_row(rep_vector(1,N_tilde/2), rep_vector(0,N_tilde/2));
	//vector [N_tilde] induc_vec_tilde = append_row(rep_vector(0,N_tilde/2), 2*pi()*freq_tilde);
	int<lower=0> Ks_pre[Ms+1]; 
	int<lower=0> Kp_pre[Mp+1];
	Ks_pre[1] = 1;
	Ks_pre[2:Ms+1] = Ks;
	Kp_pre[1] = 1;
	Kp_pre[2:Mp+1] = Kp;
}
parameters {
	real<lower=0> Rinf_raw;
	real<lower=0> induc;
	vector<lower=0>[sum(Ks)] xs; // concatenated coefficients for series distributions
	vector<lower=0>[sum(Kp)] xp; // concatenated coefficients for parallel distributions
	real<lower=0> sigma_res_raw;
	real<lower=0> alpha_prop_raw;
	real<lower=0> alpha_re_raw;
	real<lower=0> alpha_im_raw;
	vector<lower=0>[sum(Ks)] ups_s_raw;
	vector<lower=0>[sum(Kp)] ups_p_raw;
	vector<lower=0>[Ms] d0s_strength;
	vector<lower=0>[Ms] d1s_strength;
	vector<lower=0>[Ms] d2s_strength;
	vector<lower=0>[Mp] d0p_strength;
	vector<lower=0>[Mp] d1p_strength;
	vector<lower=0>[Mp] d2p_strength;
}
transformed parameters {
	real<lower=0> Rinf = Rinf_raw*100;
	real<lower=0> x_sum_raw = sum(xs) + sum(xp);
	real<lower=0> x_sum = x_sum_raw*x_sum_invscale;
	real<lower=0> sigma_res = sigma_res_raw*0.05;
	real<lower=0> alpha_prop = alpha_prop_raw*0.05;
	real<lower=0> alpha_re = alpha_re_raw*0.05;
	real<lower=0> alpha_im = alpha_im_raw*0.05;
	vector[N] Y_hat;
	vector[N/2] Y_hat_re;
	vector[N/2] Y_hat_im;
	vector[N] Z_hat_d = rep_vector(0,N);
	vector[N] Z_hat;
	vector[N] Z_hat_re;
	vector[N] Z_hat_im;
	vector<lower=0>[N] sigma_tot;
	vector<lower=0>[sum(Ks)] ups_s = ups_s_raw * 0.15;
	vector<lower=0>[sum(Kp)] ups_p = ups_p_raw * 0.15;
	
	matrix[N,max(Kp)] Apm;
	vector<lower=0>[max(Kp)] xpm;
	vector[sum(Ks)] qs;
	vector[sum(Kp)] qp;
	vector[max(Ks)] ups_sm;
	vector[max(Kp)] ups_pm;
	vector[max(Ks)] xsm;
	vector[sum(Ks) - 2*Ms] dups_s;
	vector[sum(Ks) - 2*Ms] dups_p;
	matrix[max(Ks),max(Ks)] L0sm;
	matrix[max(Ks),max(Ks)] L1sm;
	matrix[max(Ks),max(Ks)] L2sm;
	matrix[max(Kp),max(Kp)] L0pm;
	matrix[max(Kp),max(Kp)] L1pm;
	matrix[max(Kp),max(Kp)] L2pm;
	
	// Order matters! 
	// First sum up parallel contributions to Z_hat
	for (m in 1:Mp) {
		Apm = Ap[(m-1)*N+1:m*N, 1:max(Kp)];
		xpm[1:Kp[m]] = xp[sum(Kp_pre[1:m]):sum(Kp_pre[1:m+1])-1];
//		if (Kp[m] < max(Kp))
//			xpm[Kp[m]+1:max(Kp)] = rep_vector(0,max(Kp)-Kp[m]);
		Y_hat = Apm*xpm;
		Y_hat_re = Y_hat[1:N/2];
	    Y_hat_im = Y_hat[N/2+1:N];
		Z_hat_d += append_row(Y_hat_re ./ (square(Y_hat_re) + square(Y_hat_im)), -Y_hat_im ./ (square(Y_hat_re) + square(Y_hat_im)));
		}
		
	// Then add series, Rinf, and induc contributions
	Z_hat = Z_hat_d + As*xs + Rinf*Rinf_vec + induc*induc_vec;
	Z_hat_re = append_row(Z_hat[1:N/2],Z_hat[1:N/2]);
	Z_hat_im = append_row(Z_hat[N/2+1:N],Z_hat[N/2+1:N]);
	sigma_tot = sqrt(square(sigma_min) + square(sigma_res) + square(alpha_prop*Z_hat) + square(alpha_re*Z_hat_re) + square(alpha_im*Z_hat_im));
	
	// Finally calculate complexities and d_upsilon for all distributions
	for (m in 1:Ms) {
		//km = Ks[m];
		//start_idx = sum(Ks_pre[1:m]);
		//end_idx = sum(Ks_pre[1:m+1]);
		
		ups_sm[1:Ks[m]] = ups_s[sum(Ks_pre[1:m]):sum(Ks_pre[1:m+1])-1];
		dups_s[sum(Ks_pre[1:m])-2*(m-1):sum(Ks_pre[1:m+1])-2*m-1] = 0.5*(ups_sm[2:Ks[m]-1] - 0.5*(ups_sm[1:Ks[m]-2] + ups_sm[3:Ks[m]])) ./ ups_sm[2:Ks[m]-1];
		
		xsm[1:Ks[m]] = xs[sum(Ks_pre[1:m]):sum(Ks_pre[1:m+1])-1];
		L0sm[1:Ks[m],1:max(Ks)] = L0s[sum(Ks_pre[1:m]):sum(Ks_pre[1:m+1])-1, 1:max(Ks)];
		L1sm[1:Ks[m],1:max(Ks)] = L1s[sum(Ks_pre[1:m]):sum(Ks_pre[1:m+1])-1, 1:max(Ks)];
		L2sm[1:Ks[m],1:max(Ks)] = L2s[sum(Ks_pre[1:m]):sum(Ks_pre[1:m+1])-1, 1:max(Ks)];
		qs[sum(Ks_pre[1:m]):sum(Ks_pre[1:m+1])-1] = sqrt(d0s_strength[m]*square(L0sm*xsm) + d1s_strength[m]*square(L1sm*xsm) + d2s_strength[m]*square(L2sm*xsm))[1:Ks[m]];
		}
		
	for (m in 1:Mp) {
		//km = Ks[m];
		//start_idx = sum(Ks_pre[1:m]);
		//end_idx = sum(Ks_pre[1:m+1]);
		
		ups_pm[1:Kp[m]] = ups_s[sum(Kp_pre[1:m]):sum(Kp_pre[1:m+1])-1];
		dups_p[sum(Kp_pre[1:m])-2*(m-1):sum(Kp_pre[1:m+1])-2*m-1] = 0.5*(ups_pm[2:Kp[m]-1] - 0.5*(ups_pm[1:Kp[m]-2] + ups_pm[3:Kp[m]])) ./ ups_pm[2:Kp[m]-1];
		
		xpm[1:Kp[m]] = xp[sum(Kp_pre[1:m]):sum(Kp_pre[1:m+1])-1];
		L0pm[1:Kp[m],1:max(Kp)] = L0p[sum(Kp_pre[1:m]):sum(Kp_pre[1:m+1])-1, 1:max(Kp)];
		L1pm[1:Kp[m],1:max(Kp)] = L1p[sum(Kp_pre[1:m]):sum(Kp_pre[1:m+1])-1, 1:max(Kp)];
		L2pm[1:Kp[m],1:max(Kp)] = L2p[sum(Kp_pre[1:m]):sum(Kp_pre[1:m+1])-1, 1:max(Kp)];
		qp[sum(Kp_pre[1:m]):sum(Kp_pre[1:m+1])-1] = sqrt(d0p_strength[m]*square(L0pm*xpm) + d1p_strength[m]*square(L1pm*xpm) + d2p_strength[m]*square(L2pm*xpm))[1:Kp[m]];
		}
	
}
model {
	
	d0s_strength ~ inv_gamma(5,5);
	d1s_strength ~ inv_gamma(5,5);
	d2s_strength ~ inv_gamma(5,5);
	d0p_strength ~ inv_gamma(5,5);
	d1p_strength ~ inv_gamma(5,5);
	d2p_strength ~ inv_gamma(5,5);
		
	dups_s ~ std_normal();
	qs ~ normal(0,ups_s);
	dups_p ~ std_normal();
	qp ~ normal(0,ups_p);
	
	x_sum ~ std_normal();
	ups_s_raw ~ inv_gamma(ups_alpha,ups_beta);
	ups_p_raw ~ inv_gamma(ups_alpha,ups_beta);
	Rinf_raw ~ std_normal();
	induc ~ std_normal();
	Z ~ normal(Z_hat,sigma_tot);
	sigma_res_raw ~ std_normal();
	alpha_prop_raw ~ std_normal();
	alpha_re_raw ~ std_normal();
	alpha_im_raw ~ std_normal();
}